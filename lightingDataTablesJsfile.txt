import { api, LightningElement,track,wire } from 'lwc';
import getAccountList from '@salesforce/apex/lightingDataTables_CC.getAccountList';
import getDataFromContact  from '@salesforce/apex/lightingDataTables_CC.getDataFromContact';
import {ShowToastEvent} from 'lightning/platformShowToastEvent'
//import TestVideo from '@salesforce/resourceUrl/DemoVideo';

export default class LightingDataTables extends LightningElement {
//Coloumns for Account obj
    @track columns = [
        { label: 'Id', fieldName: 'Id'},
        { label: 'Name', fieldName: 'Name' },
        { label: 'Phone', fieldName: 'Phone' },
        { label: 'City', fieldName: 'ShippingCity' },
        { label: 'State', fieldName: 'ShippingState'},
    ];
    @track accountList;

    columns1 = [
        {label: 'View',
        type: 'button-icon',
        initialWidth: 75,
        typeAttributes: {
            iconName: 'action:preview',
            title: 'Preview',
            variant: 'border-filled',
            alternativeText: 'View'
        }
      },
      { label: 'First Name',fieldName: 'FirstName'},
      { label: 'Last Name', fieldName: 'LastName' },
      { label: 'Email', fieldName: 'Email' },
      { label: 'Phone', fieldName: 'Phone' },
    ];
    @track contactList;
    @track contactRow={};
    @track rowOffset = 0;  
    @track modalContainer = false;
    @wire(getDataFromContact) wireContact;

     //Method 2
   @wire (getAccountList) wireAccounts({data,error}){
        if (data) {
            this.accountList = data;
        console.log(data); 
        } else if (error) {
        console.log(error);
        }
    }

    //Data of Contact object with Inline Action method : Start
    @wire (getDataFromContact) wireContacts({data,error}){
        if (data) {
            this.contactList = data;
        console.log(data); 
        } else if (error) {
        console.log(error);
        }
    }

    handleRowAction(event){
        const dataRow = event.detail.row;
        window.console.log('dataRow@@ ' + dataRow);
        this.contactRow=dataRow;
        window.console.log('contactRow## ' + dataRow);
        this.modalContainer=true;
    }
    closeModalAction(){
        this.modalContainer=false;
    }
//Data of Contact object with Inline Action method : End

//Video Handle Play, Pause : Start
video = "/resource/DemoVideo";
    
handlePlay() {
    this.template.querySelector('c-lightning-data-tables-child').play();
}

handlePause() {
    this.template.querySelector('c-lightning-data-tables-child').pause();
}
//Video Handle Play, Pause : End

successtoastHandler(){ 
    this.showToast("Success!!", "{0} Account Created!! {1}", "success")
}
errortoastHandler(){ 
    this.showToast("Error!!", "Account Creation Failed!!", "error")
}
warningtoastHandler(){ 
    this.showToast("Warning!!", "Password should have 15 characters!!", "warning")
}
infotoastHandler(){ 
    this.showToast("Info!!", "Toast notification Info variant", "info")
}
showToast(title, message, variant){ 
    const event = new ShowToastEvent({ 
        title,
        message,
        variant,
        messageData:[
            'Salesforce',{ 
                url:'http://www.salesforce.com/',
                label:'Click Here'
            }
        ],
        mode:'sticky' //Pester --> 3 sec //dismissable --> Defult
    })
    this.dispatchEvent(event)
}
/*@track barVal = 10;
    passToParent(event){
        this.barVal = event.detail;
    }*/



    @track currentStep = '1';
 
    handleOnStepClick(event) {
        this.currentStep = event.target.value;
    }
 
    get isStepOne() {
        return this.currentStep === "1";
    }
 
    get isStepTwo() {
        return this.currentStep === "2";
    }
 
    get isStepThree() {
        return this.currentStep === "3";
    }
 
    get isEnableNext() {
        return this.currentStep != "3";
    }
 
    get isEnablePrev() {
        return this.currentStep != "1";
    }
 
    get isEnableFinish() {
        return this.currentStep === "3";
    }
 
    handleNext(){
        if(this.currentStep == "1"){
            this.currentStep = "2";
        }
        else if(this.currentStep = "2"){
            this.currentStep = "3";
        }
    }
 
    handlePrev(){
        if(this.currentStep == "3"){
            this.currentStep = "2";
        }
        else if(this.currentStep = "2"){
            this.currentStep = "1";
        }
    }
 
    handleFinish(){
 
    }
}